name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: nohello
  K8S_NAMESPACE: default
  K8S_DEPLOYMENT_NAME: nohello

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/nohello:${{ github.sha }}

    - name: Install and configure AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
        echo 'export PATH=$PATH:/usr/local/bin/aws' >> $GITHUB_ENV

    - name: Create ECS cluster
      run: |
        aws ecs create-cluster --cluster-name hello-bot-cluster

    - name: Register ECS task definition
      run: |
        aws ecs register-task-definition \
          --family hello-bot-task \
          --execution-role-arn REPLACE_WITH_EXECUTION_ROLE_ARN \
          --container-definitions '[{
            "name": "nohello",
            "image": "${{ steps.login-ecr.outputs.registry }}/no-hello-bot:${{ github.sha }}",
            "essential": true,
            "portMappings": [{
              "containerPort": 8888,
              "hostPort": 8888
            }]
          }]'

    - name: Create ECS service
      run: |
        aws ecs create-service \
          --cluster hello-bot-cluster \
          --service-name hello-bot-service \
          --task-definition hello-bot-task \
          --desired-count 1 \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[discord_bot_subnet,discord_bot_subnet],assignPublicIp=ENABLED}"

    - name: Update ECS service
      run: |
        aws ecs update-service --cluster nohello --service nohello --force-new-deployment
